"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../packages/opconnect-next-siwop/build/index.es.js":
/*!*************************************************************!*\
  !*** ../../packages/opconnect-next-siwop/build/index.es.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"configureClientSIWOP\": function() { return /* binding */ configureClientSIWOP; },\n/* harmony export */   \"configureServerSideSIWOP\": function() { return /* binding */ configureServerSideSIWOP; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"../../node_modules/react/jsx-runtime.js\");\n/* harmony import */ var opconnect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! opconnect */ \"../../packages/opconnect/build/index.es.js\");\n/* harmony import */ var iron_session__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! iron-session */ \"../../node_modules/iron-session/dist/index.mjs\");\n/* harmony import */ var viem_siwe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/siwe */ \"../../packages/opconnect-next-siwop/node_modules/viem/_esm/siwe/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/process/browser.js\");\n\n\n\n\n\nclass InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n/**\n * Base64 decode unicode\n * @param str\n * @returns\n */\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\n/**\n * Base64 URL decode\n * @param str\n * @returns\n */\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nfunction jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n\nconst API_URL = 'https://alpha-api.other.page/v1';\nconst getSession = async (req, res, // ServerResponse<IncomingMessage>,\nsessionConfig) => {\n    const session = (await (0,iron_session__WEBPACK_IMPORTED_MODULE_2__.getIronSession)(req, res, sessionConfig));\n    return session;\n};\nconst logoutRoute = async (req, res, sessionConfig, afterCallback) => {\n    switch (req.method) {\n        case 'GET':\n            const session = await getSession(req, res, sessionConfig);\n            session.destroy();\n            if (afterCallback) {\n                await afterCallback(req, res);\n            }\n            res.status(200).end();\n            break;\n        default:\n            res.setHeader('Allow', ['GET']);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n};\nconst nonceRoute = async (req, res, sessionConfig, afterCallback) => {\n    switch (req.method) {\n        case 'GET':\n            const session = await getSession(req, res, sessionConfig);\n            if (!session.nonce) {\n                session.nonce = (0,viem_siwe__WEBPACK_IMPORTED_MODULE_3__.generateSiweNonce)();\n                await session.save();\n            }\n            if (afterCallback) {\n                await afterCallback(req, res, session);\n            }\n            res.send(session.nonce);\n            break;\n        default:\n            res.setHeader('Allow', ['GET']);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n};\nconst sessionRoute = async (req, res, sessionConfig, afterCallback) => {\n    switch (req.method) {\n        case 'GET':\n            const session = await getSession(req, res, sessionConfig);\n            if (afterCallback) {\n                await afterCallback(req, res, session);\n            }\n            res.send(session);\n            break;\n        default:\n            res.setHeader('Allow', ['GET']);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n};\nconst verifyCodeRoute = async (req, res, sessionConfig, config, afterCallback) => {\n    switch (req.method) {\n        case 'POST':\n            try {\n                // fetch access token\n                const response = await fetch(`${config === null || config === void 0 ? void 0 : config.authApiUrl}/connect/oauth2-token`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        grant_type: 'authorization_code',\n                        code: req.body.code,\n                        code_verifier: 'n5qH3d6tJ7lGi1BEB1tb9BAqkgRm9nRpUTkcODDajpUXD8Se', // TODO where to store this?\n                        aud: config === null || config === void 0 ? void 0 : config.audience,\n                        client_id: config === null || config === void 0 ? void 0 : config.clientId,\n                        client_secret: config === null || config === void 0 ? void 0 : config.clientSecret,\n                        redirect_uri: config === null || config === void 0 ? void 0 : config.redirectUri,\n                    }),\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to retrieve access token');\n                }\n                const data = await response.json();\n                if (!data.access_token) {\n                    return res.status(422).end('Unable to fetch access token.');\n                }\n                // persist session data\n                const decoded = jwtDecode(data.access_token);\n                const session = await getSession(req, res, sessionConfig);\n                session.address = decoded.wallet;\n                session.uid = decoded.sub;\n                await session.save();\n                if (afterCallback) {\n                    await afterCallback(req, res, session, {\n                        ...data,\n                        decoded_access_token: decoded,\n                    });\n                }\n                res.status(200).end();\n            }\n            catch (error) {\n                res.status(400).end(String(error));\n            }\n            break;\n        default:\n            res.setHeader('Allow', ['POST']);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n};\nconst envVar = (name) => {\n    const value = process.env[name];\n    if (!value) {\n        throw new Error(`Missing environment variable: ${name}`);\n    }\n    return value;\n};\nconst configureServerSideSIWOP = ({ config, session: { cookieName, password, cookieOptions, ...otherSessionOptions } = {}, options: { afterNonce, afterToken, afterSession, afterLogout } = {}, }) => {\n    config.authApiUrl = config.authApiUrl || API_URL;\n    const sessionConfig = {\n        cookieName: cookieName !== null && cookieName !== void 0 ? cookieName : 'opconnect-next-siwop',\n        password: password !== null && password !== void 0 ? password : envVar('SESSION_SECRET'),\n        cookieOptions: {\n            secure: \"development\" === 'production',\n            ...(cookieOptions !== null && cookieOptions !== void 0 ? cookieOptions : {}),\n        },\n        ...otherSessionOptions,\n    };\n    const apiRouteHandler = async (req, res) => {\n        if (!(req.query.route instanceof Array)) {\n            throw new Error('Catch-all query param `route` not found. SIWOP API page should be named `[...route].ts` and within your `pages/api` directory.');\n        }\n        const route = req.query.route.join('/');\n        switch (route) {\n            case 'nonce':\n                return await nonceRoute(req, res, sessionConfig, afterNonce);\n            case 'verify':\n                return await verifyCodeRoute(req, res, sessionConfig, config, afterToken);\n            case 'session':\n                return await sessionRoute(req, res, sessionConfig, afterSession);\n            case 'logout':\n                return await logoutRoute(req, res, sessionConfig, afterLogout);\n            default:\n                return res.status(404).end();\n        }\n    };\n    return {\n        apiRouteHandler,\n        getSession: async (req, res) => await getSession(req, res, sessionConfig),\n    };\n};\nconst configureClientSIWOP = ({ appUrl, apiRoutePrefix, clientId, redirectUri, scope, }) => {\n    const NextSIWOPProvider = (props) => {\n        const APP_URL = appUrl || 'https://alpha.other.page';\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(opconnect__WEBPACK_IMPORTED_MODULE_1__.SIWOPProvider, { clientId: clientId, redirectUri: redirectUri, scope: scope, getNonce: async () => {\n                const res = await fetch(`${apiRoutePrefix}/nonce`);\n                if (!res.ok) {\n                    throw new Error('Failed to fetch SIWOP nonce');\n                }\n                const nonce = await res.text();\n                return nonce;\n            }, createAuthorizationUrl: ({ nonce, address, code_challenge }) => `${APP_URL}/connect?client_id=${clientId}&scope=${scope.replace(' ', '+')}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&state=${nonce}&wallet=${address}&code_challenge=${code_challenge}&code_challenge_method=S256`, verifyCode: ({ code }) => fetch(`${apiRoutePrefix}/verify`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ code }),\n            }).then((r) => r.ok), getSession: async () => {\n                const res = await fetch(`${apiRoutePrefix}/session`);\n                if (!res.ok) {\n                    throw new Error('Failed to fetch SIWOP session');\n                }\n                const { address, nonce, uid, chainId } = await res.json();\n                return address ? { address, nonce, uid, chainId } : null;\n            }, signOut: () => fetch(`${apiRoutePrefix}/logout`).then((res) => res.ok), ...props }));\n    };\n    return {\n        Provider: NextSIWOPProvider,\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../packages/opconnect-next-siwop/build/index.es.js\n"));

/***/ })

});